# HTTPS配置，使用更新的语法
server {
    listen       443 ssl;
    listen       [::]:443 ssl;
    http2 on;  # 更新的HTTP/2语法
    server_name  conder.top www.conder.top;
    root         /usr/share/nginx/html;

    # 确保这些路径与宿主机上的实际证书路径匹配
    ssl_certificate "/etc/nginx/cert/scs1746750963901_conder.top_server.crt";
    ssl_certificate_key "/etc/nginx/cert/scs1746750963901_conder.top_server.key";
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout  10m;
    
    # 使用明确的密码套件而不是PROFILE=SYSTEM
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    location / {
        proxy_pass http://web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    error_page 404 /404.html;
    location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
}

# API站点HTTPS配置
server {
    listen       443 ssl;
    listen       [::]:443 ssl;
    http2 on;
    server_name  api.conder.top;
    
    ssl_certificate "/etc/nginx/cert/scs1746748351342_api.conder.top_server.crt";
    ssl_certificate_key "/etc/nginx/cert/scs1746748351342_api.conder.top_server.key";
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout  10m;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://nest:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # 改为nestjs的cors配置，下方已弃用，虽然也能用
        # set $cors_origin "";
        # if ($http_origin ~* "^https?://(www\.)?conder\.top.*") {
        #     set $cors_origin $http_origin;
        # }
        # if ($http_origin ~* "^https?://admin\.conder\.top.*") {
        #     set $cors_origin $http_origin;
        # }
        # # 统一设置 CORS 头
        # add_header 'Access-Control-Allow-Origin' $cors_origin always;
        # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        # add_header 'Access-Control-Allow-Credentials' 'true' always;
        # add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # 处理 OPTIONS 预检请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}

# 后台管理HTTPS配置
server {
    listen       443 ssl;
    listen       [::]:443 ssl;
    http2 on;
    server_name  admin.conder.top;
    
    ssl_certificate "/etc/nginx/cert/scs1746747858568_admin.conder.top_server.crt";
    ssl_certificate_key "/etc/nginx/cert/scs1746747858568_admin.conder.top_server.key";
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout  10m;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://admin;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}