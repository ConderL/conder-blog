name: 测试环境部署

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "部署环境"
        required: true
        default: "test"
        type: choice
        options:
          - test
          - local

env:
  NODE_VERSION: 19.6.1
  PNPM_VERSION: 9.7.1
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  ELASTICSEARCH_PASSWORD: ${{ secrets.ELASTICSEARCH_PASSWORD }}
  OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
  OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
  OSS_REGION: ${{ secrets.OSS_REGION }}
  OSS_BUCKET: ${{ secrets.OSS_BUCKET }}
  OSS_ENDPOINT: ${{ secrets.OSS_ENDPOINT }}
  OSS_CDN_URL: ${{ secrets.OSS_CDN_URL }}
  BAIDU_API_KEY: ${{ secrets.BAIDU_API_KEY }}
  BAIDU_SECRET_KEY: ${{ secrets.BAIDU_SECRET_KEY }}
  RSA_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
  SERVER_DEPLOY_TEST_PATH: ${{ secrets.SERVER_DEPLOY_TEST_PATH }}
  MAIL_HOST: ${{ secrets.MAIL_HOST }}
  MAIL_PORT: ${{ secrets.MAIL_PORT }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
  OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
  OAUTH_GITHUB_REDIRECT_URL: ${{ secrets.OAUTH_GITHUB_REDIRECT_URL }}
  OAUTH_GITEE_CLIENT_ID: ${{ secrets.OAUTH_GITEE_CLIENT_ID }}
  OAUTH_GITEE_CLIENT_SECRET: ${{ secrets.OAUTH_GITEE_CLIENT_SECRET }}
  OAUTH_GITEE_REDIRECT_URL: ${{ secrets.OAUTH_GITEE_REDIRECT_URL }}
  OAUTH_QQ_APP_ID: ${{ secrets.OAUTH_QQ_APP_ID }}
  OAUTH_QQ_APP_KEY: ${{ secrets.OAUTH_QQ_APP_KEY }}
  OAUTH_QQ_REDIRECT_URL: ${{ secrets.OAUTH_QQ_REDIRECT_URL }}
  TAG: ${{ github.sha }}

jobs:
  build-and-deploy-local:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 配置PNPM缓存
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 安装依赖
        run: pnpm install

      - name: 应用构建
        run: pnpm build

      - name: 打包构建产物
        run: |
          tar -czf dist.tar.gz packages/*/dist

      - name: 分割大文件
        run: |
          mkdir -p chunks
          split -b 50M dist.tar.gz chunks/part-

      - name: 安装rsync
        run: sudo apt-get install -y rsync

      - name: 设置SSH密钥
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 使用rsync上传文件
        run: |
          rsync -avz --delete dist/ ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_DEPLOY_TEST_PATH }}/dist/

      - name: 上传前端构建产物
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "packages/blog-web/dist/*"
          target: "${{ secrets.SERVER_DEPLOY_TEST_PATH }}/packages/blog-web/dist"
          strip_components: 3
          overwrite: true

      - name: 上传后台构建产物
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "packages/blog-admin/dist/*"
          target: "${{ secrets.SERVER_DEPLOY_TEST_PATH }}/packages/blog-admin/dist"
          strip_components: 3
          overwrite: true

      - name: 部署到服务器 - 本地构建模式
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -exo pipefail
            cd ${{ env.SERVER_DEPLOY_TEST_PATH }}

            # 停止现有容器但保留数据卷
            docker compose down --remove-orphans --timeout 30

            # 根据输入决定是否跳过代码拉取
            if [ "${{ inputs.skip_git_pull }}" != "true" ]; then
              git fetch --all
              git reset --hard origin/main
              git pull origin main --force
            fi

            # 解压构建产物(如果存在)
            if [ -f dist.tar.gz ]; then
              tar -xzf dist.tar.gz
              rm dist.tar.gz
            fi

            # 创建基本环境变量文件
            cat > .env << EOF
            DB_HOST=mysql
            DB_PORT=3306
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_HOST=redis
            REDIS_PORT=6379
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            EOF

            # 创建后端环境配置
            cat > packages/blog-nest/.env << EOF
            FRONTEND_URL=https://conder.top
            PORT=3000

            # 数据库配置
            DB_HOST=mysql
            DB_PORT=3306
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            DB_DATABASE=${{ env.DB_DATABASE }}

            # NGINX配置
            NGINX_PORT=80
            NGINX_DOMAIN=localhost

            # Redis配置
            REDIS_HOST=redis
            REDIS_PORT=6379

            # JWT配置
            JWT_SECRET=${{ env.JWT_SECRET }}
            JWT_EXPIRES_IN=7d

            # 邮件服务配置
            MAIL_HOST=${{ env.MAIL_HOST }}
            MAIL_PORT=${{ env.MAIL_PORT }}
            MAIL_USERNAME=${{ env.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ env.MAIL_PASSWORD }}

            # 第三方登录配置
            OAUTH_GITHUB_CLIENT_ID=${{ env.OAUTH_GITHUB_CLIENT_ID }}
            OAUTH_GITHUB_CLIENT_SECRET=${{ env.OAUTH_GITHUB_CLIENT_SECRET }}
            OAUTH_GITHUB_REDIRECT_URL=${{ env.OAUTH_GITHUB_REDIRECT_URL }}

            OAUTH_GITEE_CLIENT_ID=${{ env.OAUTH_GITEE_CLIENT_ID }}
            OAUTH_GITEE_CLIENT_SECRET=${{ env.OAUTH_GITEE_CLIENT_SECRET }}
            OAUTH_GITEE_REDIRECT_URL=${{ env.OAUTH_GITEE_REDIRECT_URL }}

            OAUTH_QQ_APP_ID=${{ env.OAUTH_QQ_APP_ID }}
            OAUTH_QQ_APP_KEY=${{ env.OAUTH_QQ_APP_KEY }}
            OAUTH_QQ_REDIRECT_URL=${{ env.OAUTH_QQ_REDIRECT_URL }}

            # 搜索配置
            SEARCH_MODE=mysql
            ELASTICSEARCH_USERNAME=elastic
            ELASTICSEARCH_PASSWORD=${{ env.ELASTICSEARCH_PASSWORD }}
            ELASTICSEARCH_HOSTNAME=localhost
            ELASTICSEARCH_PORT=9200

            ## 阿里云OSS配置
            UPLOAD_STRATEGY=oss
            OSS_ACCESS_KEY_ID=${{ env.OSS_ACCESS_KEY_ID }}
            OSS_ACCESS_KEY_SECRET=${{ env.OSS_ACCESS_KEY_SECRET }}
            OSS_REGION=${{ env.OSS_REGION }}
            OSS_BUCKET=${{ env.OSS_BUCKET }}
            OSS_ENDPOINT=${{ env.OSS_ENDPOINT }}
            OSS_CDN_URL=${{ env.OSS_CDN_URL }}

            # 百度文本审核配置
            BAIDU_API_KEY=${{ env.BAIDU_API_KEY }}
            BAIDU_SECRET_KEY=${{ env.BAIDU_SECRET_KEY }}

            # 登录鉴权私钥
            RSA_PRIVATE_KEY=${{ env.RSA_PRIVATE_KEY }}
            EOF

            # 使用本地构建模式启动
            docker compose -f docker-compose.local.yml up -d --build

            # 等待服务启动
            sleep 30

            # 保存日志
            docker compose -f docker-compose.local.yml logs > local-deployment.log
