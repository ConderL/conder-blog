name: 生产环境发布

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: 19.6.1
  PNPM_VERSION: 9.7.1
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  ELASTICSEARCH_PASSWORD: ${{ secrets.ELASTICSEARCH_PASSWORD }}
  OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
  OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
  OSS_REGION: ${{ secrets.OSS_REGION }}
  OSS_BUCKET: ${{ secrets.OSS_BUCKET }}
  OSS_ENDPOINT: ${{ secrets.OSS_ENDPOINT }}
  OSS_CDN_URL: ${{ secrets.OSS_CDN_URL }}
  BAIDU_API_KEY: ${{ secrets.BAIDU_API_KEY }}
  BAIDU_SECRET_KEY: ${{ secrets.BAIDU_SECRET_KEY }}
  RSA_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
  SERVER_DEPLOY_PATH: ${{ secrets.SERVER_DEPLOY_PATH }}
  MAIL_HOST: ${{ secrets.MAIL_HOST }}
  MAIL_PORT: ${{ secrets.MAIL_PORT }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
  OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
  OAUTH_GITHUB_REDIRECT_URL: ${{ secrets.OAUTH_GITHUB_REDIRECT_URL }}
  OAUTH_GITEE_CLIENT_ID: ${{ secrets.OAUTH_GITEE_CLIENT_ID }}
  OAUTH_GITEE_CLIENT_SECRET: ${{ secrets.OAUTH_GITEE_CLIENT_SECRET }}
  OAUTH_GITEE_REDIRECT_URL: ${{ secrets.OAUTH_GITEE_REDIRECT_URL }}
  OAUTH_QQ_APP_ID: ${{ secrets.OAUTH_QQ_APP_ID }}
  OAUTH_QQ_APP_KEY: ${{ secrets.OAUTH_QQ_APP_KEY }}
  OAUTH_QQ_REDIRECT_URL: ${{ secrets.OAUTH_QQ_REDIRECT_URL }}
  TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 清理无用容器
        run: |
          docker container prune -f

      - name: 清理悬空镜像
        run: |
          docker image prune -f

      - name: 清理构建缓存
        run: |
          docker builder prune -f

      - name: 安装PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9.7.1

      - name: 配置PNPM缓存
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 应用构建
        run: pnpm build

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登录Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: 构建并推送后端镜像
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/blog-nest.Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/blog-nest:${{ env.TAG }}
            ${{ env.DOCKERHUB_USERNAME }}/blog-nest:latest
          no-cache: true

      - name: 构建并推送前台镜像
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/blog-web.Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/blog-web:${{ env.TAG }}
            ${{ env.DOCKERHUB_USERNAME }}/blog-web:latest
          no-cache: true

      - name: 构建并推送后台镜像
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/blog-admin.Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/blog-admin:${{ env.TAG }}
            ${{ env.DOCKERHUB_USERNAME }}/blog-admin:latest
          no-cache: true

      - name: 部署到服务器 - 准备环境
        if: github.event_name != 'pull_request'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -exo pipefail
            cd ${{ env.SERVER_DEPLOY_PATH }}

            # 强制清理旧容器
            docker compose down --remove-orphans --volumes --timeout 30

            # git fetch --all
            # git reset --hard origin/main
            # git pull origin main --force

            # 创建环境变量文件
            cat > .env << EOF
            DB_HOST=mysql
            DB_PORT=3306
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            REDIS_HOST=redis
            REDIS_PORT=6379
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            TAG=${{ env.TAG }}
            EOF

            # 创建后端环境配置
            cat > packages/blog-nest/.env << EOF
            FRONTEND_URL=https://conder.top
            PORT=3000

            # 数据库配置
            DB_HOST=mysql
            DB_PORT=3306
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            DB_DATABASE=${{ env.DB_DATABASE }}

            # NGINX配置
            NGINX_PORT=80
            NGINX_DOMAIN=localhost

            # Redis配置
            REDIS_HOST=redis
            REDIS_PORT=6379

            # JWT配置
            JWT_SECRET=${{ env.JWT_SECRET }}
            JWT_EXPIRES_IN=7d

            # 邮件服务配置
            MAIL_HOST=${{ env.MAIL_HOST }}
            MAIL_PORT=${{ env.MAIL_PORT }}
            MAIL_USERNAME=${{ env.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ env.MAIL_PASSWORD }}

            # 第三方登录配置
            OAUTH_GITHUB_CLIENT_ID=${{ env.OAUTH_GITHUB_CLIENT_ID }}
            OAUTH_GITHUB_CLIENT_SECRET=${{ env.OAUTH_GITHUB_CLIENT_SECRET }}
            OAUTH_GITHUB_REDIRECT_URL=${{ env.OAUTH_GITHUB_REDIRECT_URL }}

            OAUTH_GITEE_CLIENT_ID=${{ env.OAUTH_GITEE_CLIENT_ID }}
            OAUTH_GITEE_CLIENT_SECRET=${{ env.OAUTH_GITEE_CLIENT_SECRET }}
            OAUTH_GITEE_REDIRECT_URL=${{ env.OAUTH_GITEE_REDIRECT_URL }}

            OAUTH_QQ_APP_ID=${{ env.OAUTH_QQ_APP_ID }}
            OAUTH_QQ_APP_KEY=${{ env.OAUTH_QQ_APP_KEY }}
            OAUTH_QQ_REDIRECT_URL=${{ env.OAUTH_QQ_REDIRECT_URL }}

            # 搜索配置
            SEARCH_MODE=mysql
            ELASTICSEARCH_USERNAME=elastic
            ELASTICSEARCH_PASSWORD=${{ env.ELASTICSEARCH_PASSWORD }}
            ELASTICSEARCH_HOSTNAME=localhost
            ELASTICSEARCH_PORT=9200

            ## 阿里云OSS配置
            UPLOAD_STRATEGY=oss
            OSS_ACCESS_KEY_ID=${{ env.OSS_ACCESS_KEY_ID }}
            OSS_ACCESS_KEY_SECRET=${{ env.OSS_ACCESS_KEY_SECRET }}
            OSS_REGION=${{ env.OSS_REGION }}
            OSS_BUCKET=${{ env.OSS_BUCKET }}
            OSS_ENDPOINT=${{ env.OSS_ENDPOINT }}
            OSS_CDN_URL=${{ env.OSS_CDN_URL }}

            # 百度文本审核配置
            BAIDU_API_KEY=${{ env.BAIDU_API_KEY }}
            BAIDU_SECRET_KEY=${{ env.BAIDU_SECRET_KEY }}

            # 登录鉴权私钥
            RSA_PRIVATE_KEY=${{ env.RSA_PRIVATE_KEY }}
            EOF

      - name: 部署到服务器 - 拉取镜像
        if: github.event_name != 'pull_request'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          command_timeout: 30m
          script: |
            set -exo pipefail
            cd ${{ env.SERVER_DEPLOY_PATH }}

            docker pull ${{ env.DOCKERHUB_USERNAME }}/blog-nest:${{ env.TAG }}
            docker pull ${{ env.DOCKERHUB_USERNAME }}/blog-web:${{ env.TAG }}
            docker pull ${{ env.DOCKERHUB_USERNAME }}/blog-admin:${{ env.TAG }}

      - name: 部署到服务器 - 启动数据库
        if: github.event_name != 'pull_request'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -exo pipefail
            cd ${{ env.SERVER_DEPLOY_PATH }}
            docker compose up -d mysql redis

            # 等待数据库就绪
            echo "等待数据库启动..."
            for i in {1..20}; do
              if docker compose exec mysql mysqladmin ping -h localhost --silent; then
                echo "MySQL 已就绪"
                break
              fi
              echo "等待 MySQL... 尝试 $i/20"
              sleep 10
            done

      - name: 部署到服务器 - 启动服务
        if: github.event_name != 'pull_request'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            set -exo pipefail
            cd ${{ env.SERVER_DEPLOY_PATH }}

            # 拉取镜像
            docker compose pull

            # 先启动除Nginx外的服务
            docker compose up -d mysql redis nest web admin
            echo "等待前后端服务启动完成..."
            sleep 30

            # 检查服务是否成功启动
            echo "检查服务状态:"
            docker compose ps

            # 最后启动Nginx
            docker compose up -d nginx
            sleep 5

            # 清理镜像
            docker image prune -a -f --filter "until=24h"
            docker images | grep "blog-" | grep -v "${{ env.TAG }}" | awk '{print $3}' | xargs -I {} sh -c 'docker rmi {} || echo "跳过镜像 {}"' || echo "清理完成"

            # 清理未使用的卷和网络
            docker system prune -f --volumes

            # 保存日志
            docker compose logs > deployment.log

            # 重新加载Nginx配置
            docker compose exec nginx nginx -s reload || echo "Nginx配置重载失败"
